{"version":3,"sources":["reportWebVitals.js","components/ColorPicker.js","components/CP.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","React","Component","CP","props","useState","background","setBackground","error","cubName","setCubName","inpVal","useRef","Fragment","color","onChangeComplete","hex","current","value","style","Input","inputRef","Button","onClick","cubname","onclick","drawerWidth","useStyles","makeStyles","theme","root","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","contentShift","App","classes","useTheme","open","setOpen","JSON","parse","localStorage","getItem","colors","setColor","cubnames","setName","className","CssBaseline","AppBar","position","clsx","Toolbar","IconButton","edge","Typography","variant","noWrap","Drawer","anchor","paper","direction","Divider","size","window","removeItem","ColorArr","i","newColor","Math","random","toString","substr","push","console","log","setItem","stringify","concat","map","index","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3dcf5118.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// class version of CP component\r\nimport React from \"react\"; \r\nimport { SketchPicker } from 'react-color';\r\nimport Input from '@material-ui/core/Input';\r\n\r\nclass ColorPicker extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            background: \"#E01060\",\r\n            error: false ,\r\n            cubName: \"\" , \r\n        }\r\n        this.saveColor=this.saveColor.bind(this);\r\n        this.handleChangeComplete=this.handleChangeComplete.bind(this);\r\n\r\n        this.inpVal = React.createRef(); \r\n    }\r\n    saveColor(){\r\n      \r\n        console.log(\"cubname\" , this.state.cubName) ; \r\n        \r\n        var color =  this.state.background ; \r\n        var cubname = this.state.cubName; \r\n        return this.props.onclick(color , cubname);\r\n    }\r\n    handleChangeComplete = (color) => {\r\n        this.setState({ \r\n            background: color.hex , \r\n            cubName: this.inpVal.current.value , \r\n         });\r\n\r\n         this.inpVal.current.value = \"\" ; \r\n      };\r\n\r\n    render(){\r\n        return(\r\n            <React.Fragment>\r\n                <SketchPicker   \r\n                color={ this.state.background }\r\n                onChangeComplete={ this.handleChangeComplete } \r\n                style={{ \"margin\":10 }}\r\n                />\r\n                <Input  \r\n                error={this.state.error} \r\n                inputRef={this.inpVal} \r\n                style={{\r\n                    \"margin\":10 , \r\n                    \"width\":\"90%\" }}/>\r\n                <button \r\n                onClick={this.saveColor}  \r\n                style={{\r\n                    \"background-color\":this.state.background ,\r\n                    \"margin\":10 , \r\n                    \"width\":\"90%\" \r\n                }}>ADD</button>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ColorPicker;","import React from \"react\";\r\nimport { SketchPicker } from 'react-color';\r\nimport Input from '@material-ui/core/Input';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nfunction CP (props) {\r\n    const [background , setBackground]= React.useState(\"#E01060\") ; \r\n    const [error , setError]= React.useState(false) ; \r\n    const [cubName , setCubName]= React.useState(\"\") ;\r\n    const inpVal = React.useRef();\r\n    \r\n    const saveColor = () => {\r\n        var color =  background; \r\n        var cubname = cubName; \r\n        return props.onclick(color , cubname);\r\n    }\r\n\r\n    const handleChangeComplete = (color) => {\r\n        setBackground(color.hex) ; \r\n        setCubName(inpVal.current.value);\r\n        inpVal.current.value = \"\" ; \r\n    };\r\n\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <SketchPicker   \r\n            color={background}\r\n            onChangeComplete={handleChangeComplete} \r\n            style={{ \"margin\":10 , }}\r\n            />\r\n            <Input  \r\n            error={error} \r\n            inputRef={inpVal} \r\n            style={{\r\n                \"margin\":10 , \r\n                \"width\":\"90%\" }}/>\r\n            <Button \r\n                onClick={saveColor}  \r\n                style={{\r\n                    \"background-color\": background ,\r\n                    \"margin\":10 , \r\n                    \"width\":\"90%\" ,\r\n                    \"padding\":7 , \r\n                    \"color\": \"white\",\r\n                    \"font-weight\": \"bold\" , \r\n                    \"font-size\": 15\r\n            }}>ADD COLOR</Button>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\nexport default CP ;","import React from 'react';\nimport clsx from 'clsx';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport Button from '@material-ui/core/Button';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport ColorPicker from \"./components/ColorPicker\";\nimport CP from \"./components/CP\";\n\nconst drawerWidth = 340;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  hide: {\n    display: 'none',\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-end',\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    marginLeft: -drawerWidth,\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n    marginLeft: 0,\n  },\n}));\n  function App() {\n    const classes = useStyles();\n    const theme = useTheme();\n    const [open, setOpen] = React.useState(false); \n    const [colors, setColor] = React.useState(JSON.parse(localStorage.getItem(\"colors\")) || []);\n    const [cubnames, setName] = React.useState(JSON.parse(localStorage.getItem(\"cubnames\")) || []);\n\n\n    const handleDrawerOpen = () => {\n      setOpen(true);\n    };\n\n    const handleDrawerClose = () => {\n      setOpen(false);\n    };\n\n    const addColorDiv = (color , cubname ) => {\n      for(let i of colors){\n          if(i=== color){\n            return ; \n          }\n      }\n      var a = window.localStorage.setItem(\"colors\" , JSON.stringify(colors));\n      var b = window.localStorage.setItem(\"cubnames\" , JSON.stringify(cubnames));\n\n      setColor(colors.concat(color));\n      setName(cubnames.concat(cubname));\n    }\n\n    const ClearePal = () => {\n      setColor([]);\n      window.localStorage.removeItem(\"colors\");\n      window.localStorage.removeItem(\"cubnames\");\n\n    }\n\n    const generateColor=  ()=>{\n      var ColorArr = [] ; \n      for(let i=0 ; i<28 ; i++){\n        var newColor = '#' +  Math.random().toString(16).substr(-6);\n        ColorArr.push(newColor); \n      }\n      console.log(\"RandomColor\", ColorArr);\n      window.localStorage.setItem(\"colors\" , JSON.stringify(ColorArr));\n      setColor(colors.concat(ColorArr));\n    }\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: open,\n        })}\n      >\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, open && classes.hide)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            Color Picker\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\n          </IconButton>\n        </div>\n        <Divider />\n       \n        <div \n        style={{\n          \"display\":\"flex\" , \n          \"alignItems\":\"center\" , \n          \"justifyContent\":\"center\" , \n          \"flexDirection\":\"column\",\n          \"padding\":10 , \n        }}>\n\n          <h1>Design your Pallete</h1>\n\n          <div style={{\"padding\":\"5px 15px 15px\"}}>\n              <Button \n              variant = \"contained\"\n              color = \"secondary\" \n              size= \"small\"\n              onClick={ClearePal}\n              >\n              Clear Pallete \n              </Button>\n              <Button\n              variant=\"contained\" \n              color=\"primary\"\n              size= \"small\"\n              style={{\"margin-left\":5}}\n              onClick={generateColor}\n              >\n              Random Color\n              </Button>\n          </div>\n\n          {/* <ColorPicker onclick={addColorDiv} />  */}\n          <CP  onclick={addColorDiv} />\n        </div>\n      </Drawer>\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: open,\n        })}\n        style={{\"padding-left\":35}}\n      >\n            <div className={classes.drawerHeader} />\n           <div\n           style={{\n             \"display\":\"flex\" ,\n             \"flex-wrap\": \"wrap\",\n             \"align-self\": \"center\", \n           }}\n           >\n           {colors[0]? \n            colors.map( (color , index)=>{\n              return(\n                <div \n                  key={`${index}`} \n                  style={{\"background-color\":`${color}` , \n                      \"width\":160 , \n                      \"height\":150 , \n                      \"padding\":10 , \n                      \"font-size\":18 , \n                      \"font-weight\":\"bold\" ,\n                  }}\n                >\n                  {color}\n                </div>\n              );\n           }):\n           <div  \n              style={{\n                \"padding\":10 , \n                \"font-size\":25 , \n                \"font-weight\":\"bold\" , \n                \"color\":\"lightgray\",\n                \"textAlign\":\"center\",\n              }}\n            >Select Color</div>\n          }\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from \"./App\";\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}